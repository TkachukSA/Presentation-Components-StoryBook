{"version":3,"sources":["componets/Rating/Rating.tsx","componets/onOff.tsx","componets/onOff2.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Star","props","onClick","value","selected","Rating","console","log","OnOff","useState","defaulValue","on","setOn","onStyle","width","height","border","display","padding","marginLeft","backgroundColor","offStyle","indicatorStyle","borderRadius","style","OnOff2","onChange","App","ratingvalue","SetValue","TestOnOff","SetOnOff","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47c3af29.chunk.js","sourcesContent":["import React from \"react\";\nexport type RatingValue =  0 | 1 | 2 | 3 | 4| 5\n\n\ntype RatingPropsType = {\n    value: RatingValue\n    onClick: (value: RatingValue) => void\n}\n\nexport function Rating(props: RatingPropsType) {\n    console.log(\"Star readder\")\n\n\n        return (\n            <div>\n                <Star selected={props.value > 0} onClick={ props.onClick} value={1}/>\n                <Star selected={props.value > 1} onClick={ props.onClick} value={2}/>\n                <Star selected={props.value > 2} onClick={ props.onClick} value={3}/>\n                <Star selected={props.value > 3} onClick={ props.onClick} value={4}/>\n                <Star selected={props.value > 4} onClick={ props.onClick} value={5}/>\n            </div>\n        );\n    }\n\n    type StarPropsType = {\n        selected: boolean\n        value: RatingValue\n        onClick: (value: RatingValue) => void\n\n    }\n        function Star(props: StarPropsType) {\n\n        return <span onClick={() => props.onClick(props.value)}>\n        { props.selected ? <b> Star </b> : \"Star \"}\n        </span>\n    }\n\n\nexport default Rating","import React, {useState} from \"react\";\n\ntype OnOffType ={\n    defaulValue?: boolean\n}\n\nfunction OnOff(props: OnOffType) {\n\n    let [on, setOn] = useState(props.defaulValue)\n\n\n\n\n\n    let onStyle = {\n        width: \"30px\",\n        height: \"20px\",\n        border: \"1px solid black\",\n        display: \"inline-block\",\n        padding: \"2px\",\n        marginLeft: \"2px\",\n        backgroundColor: on ? \"green\" : \"white\"\n    }\n    let offStyle = {\n        width: \"30px\",\n        height: \"20px\",\n        border: \"1px solid black\",\n        display: \"inline-block\",\n        padding: \"2px\",\n        marginLeft: \"5px\",\n        backgroundColor: on ? \"white\" : \"red\"\n    }\n    let indicatorStyle = {\n        width: \"20px\",\n        height: \"20px\",\n        borderRadius: \"10px\",\n        border: \"1px solid black\",\n        display: \"inline-block\",\n        backgroundColor: on ? \"green\" : \"red\"\n    }\n\n\n return <div> <div style={onStyle} onClick={ () => {setOn(true)}}>on</div>\n             <div style={offStyle} onClick={ () => {setOn(false)}}>off</div>\n             <div style={indicatorStyle}></div>\n </div>\n}\n\n\n\nexport default OnOff","import React, {useState} from \"react\";\n\ntype Onofftype = {\n    on: boolean\n    onChange: (on: boolean) => void\n\n}\n\nfunction OnOff2(props:Onofftype) {\n\n\n\n    let onStyle = {\n        width: \"30px\",\n        height: \"20px\",\n        border: \"1px solid black\",\n        display: \"inline-block\",\n        padding: \"2px\",\n        marginLeft: \"2px\",\n        backgroundColor: props.on ? \"green\" : \"white\"\n    }\n    let offStyle = {\n        width: \"30px\",\n        height: \"20px\",\n        border: \"1px solid black\",\n        display: \"inline-block\",\n        padding: \"2px\",\n        marginLeft: \"5px\",\n        backgroundColor: props.on? \"white\" : \"red\"\n    }\n    let indicatorStyle = {\n        width: \"20px\",\n        height: \"20px\",\n        borderRadius: \"10px\",\n        border: \"1px solid black\",\n        display: \"inline-block\",\n        backgroundColor: props.on  ? \"green\" : \"red\"\n    }\n\n\n return <div> <div style={onStyle} onClick={ ()=> {props.onChange(true)}}>on</div>\n             <div style={offStyle} onClick={ ()=> {props.onChange(false)}}>off</div>\n             <div style={indicatorStyle}></div>\n </div>\n}\n\n\n\nexport default OnOff2\n","import React, {useState} from 'react';\nimport './App.css';\n\n\nimport Accardion from \"./components/accordion/accordion\";\nimport Rating, {RatingValue} from \"./componets/Rating/Rating\";\nimport OnOff from \"./componets/onOff\"\nimport Accardion2 from \"./components/accordion/accordion2\";\nimport Rating2 from \"./componets/Rating/Rating2\";\nimport OnOff2 from \"./componets/onOff2\";\nimport {on} from \"cluster\";\n\nconst App = () => {\n    let [ratingvalue, SetValue] = useState<RatingValue>(0)\n    let [AccordionCollapsed, SetAccordionCollapsed] = useState<boolean>(true)\n    let [TestOnOff, SetOnOff] = useState(true)\n\n    return <div>\n\n\n        <OnOff2 on={TestOnOff} onChange={(on) => {\n            SetOnOff(on)\n        }}/>\n\n        {/*<Accardion titleValve={\"hhr\"} collapsed={AccordionCollapsed} onClick={() => {\n            SetAccordionCollapsed(!AccordionCollapsed)\n        }} item={[\"1\", \"2\"]} />*/}\n\n\n        <Rating onClick={SetValue} value={ratingvalue}/>\n        <OnOff/>\n\n    </div>;\n}\ntype PageTitleProopsType = {\n    title: string\n}\n\nfunction PegeTitle(props: PageTitleProopsType) {\n    console.log(\"Star Rendering\")\n    return <h1>{props.title}</h1>\n\n\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}